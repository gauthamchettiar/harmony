[{"source": "readme", "content": [{"Setting": "host", "Required": false, "Default": "None", "Description": "Hostname for postgres instance. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "port", "Required": false, "Default": "5432", "Description": "The port on which postgres is awaiting connection. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "user", "Required": false, "Default": "None", "Description": "User name used to authenticate. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "password", "Required": false, "Default": "None", "Description": "Password used to authenticate. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "database", "Required": false, "Default": "None", "Description": "Database name. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "sqlalchemy_url", "Required": false, "Default": "None", "Description": "SQLAlchemy connection string. This will override using host, user, password, port, dialect, and all ssl settings. Note that you must escape password special characters properly. See https://docs.sqlalchemy.org/en/20/core/engines.html#escaping-special-characters-such-as-signs-in-passwords"}, {"Setting": "dialect+driver", "Required": false, "Default": "postgresql+psycopg2", "Description": "Dialect+driver see https://docs.sqlalchemy.org/en/20/core/engines.html. Generally just leave this alone. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "default_target_schema", "Required": false, "Default": "None", "Description": "Postgres schema to send data to, example: tap-clickup"}, {"Setting": "hard_delete", "Required": false, "Default": "0", "Description": "When activate version is sent from a tap this specefies if we should delete the records that don't match, or mark them with a date in the _sdc_deleted_at column."}, {"Setting": "add_record_metadata", "Required": false, "Default": "1", "Description": "Note that this must be enabled for activate_version to work!This adds _sdc_extracted_at, _sdc_batched_at, and more to every table. See https://sdk.meltano.com/en/latest/implementation/record_metadata.html for more information."}, {"Setting": "ssh_tunnel", "Required": false, "Default": "None", "Description": "SSH Tunnel Configuration, this is a json object"}, {"Setting": "ssh_tunnel.enable", "Required": "True (if ssh_tunnel set)", "Default": "False", "Description": "Enable an ssh tunnel (also known as bastion host), see the other ssh_tunnel.* properties for more details."}, {"Setting": "ssh_tunnel.host", "Required": "True (if ssh_tunnel set)", "Default": "False", "Description": "Host of the bastion host, this is the host we'll connect to via ssh"}, {"Setting": "ssh_tunnel.username", "Required": "True (if ssh_tunnel set)", "Default": "False", "Description": "Username to connect to bastion host"}, {"Setting": "ssh_tunnel.port", "Required": "True (if ssh_tunnel set)", "Default": "22", "Description": "Port to connect to bastion host"}, {"Setting": "ssh_tunnel.private_key", "Required": "True (if ssh_tunnel set)", "Default": "None", "Description": "Private Key for authentication to the bastion host"}, {"Setting": "ssh_tunnel.private_key_password", "Required": false, "Default": "None", "Description": "Private Key Password, leave None if no password is set"}, {"Setting": "ssl_enable", "Required": false, "Default": "0", "Description": "Whether or not to use ssl to verify the server's identity. Use ssl_certificate_authority and ssl_mode for further customization. To use a client certificate to authenticate yourself to the server, use ssl_client_certificate_enable instead. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "ssl_client_certificate_enable", "Required": false, "Default": "0", "Description": "Whether or not to provide client-side certificates as a method of authentication to the server. Use ssl_client_certificate and ssl_client_private_key for further customization. To use SSL to verify the server's identity, use ssl_enable instead. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "ssl_mode", "Required": false, "Default": "verify-full", "Description": "SSL Protection method, see postgres documentation for more information. Must be one of disable, allow, prefer, require, verify-ca, or verify-full. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "ssl_certificate_authority", "Required": false, "Default": "~/.postgresql/root.crl", "Description": "The certificate authority that should be used to verify the server's identity. Can be provided either as the certificate itself (in .env) or as a filepath to the certificate. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "ssl_client_certificate", "Required": false, "Default": "~/.postgresql/postgresql.crt", "Description": "The certificate that should be used to verify your identity to the server. Can be provided either as the certificate itself (in .env) or as a filepath to the certificate. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "ssl_client_private_key", "Required": false, "Default": "~/.postgresql/postgresql.key", "Description": "The private key for the certificate you provided. Can be provided either as the certificate itself (in .env) or as a filepath to the certificate. Note if sqlalchemy_url is set this will be ignored."}, {"Setting": "ssl_storage_directory", "Required": false, "Default": ".secrets", "Description": "The folder in which to store SSL certificates provided as raw values. When a certificate/key is provided as a raw value instead of as a filepath, it must be written to a file before it can be used. This configuration option determines where that file is created."}, {"Setting": "stream_maps", "Required": false, "Default": "None", "Description": "Config object for stream maps capability. For more information check out Stream Maps."}, {"Setting": "stream_map_config", "Required": false, "Default": "None", "Description": "User-defined config values to be used within map expressions."}, {"Setting": "flattening_enabled", "Required": false, "Default": "None", "Description": "'True' to enable schema flattening and automatically expand nested properties."}, {"Setting": "flattening_max_depth", "Required": false, "Default": "None", "Description": "The max depth to flatten schemas."}], "instance": 0}]