[{"source": "readme", "content": [{"Property": "account", "Type": "String", "Required?": "Yes", "Description": "Snowflake account name (i.e. rtXXXXX.eu-central-1)"}, {"Property": "dbname", "Type": "String", "Required?": "Yes", "Description": "Snowflake Database name"}, {"Property": "user", "Type": "String", "Required?": "Yes", "Description": "Snowflake User"}, {"Property": "password", "Type": "String", "Required?": "Yes", "Description": "Snowflake Password"}, {"Property": "warehouse", "Type": "String", "Required?": "Yes", "Description": "Snowflake virtual warehouse name"}, {"Property": "role", "Type": "String", "Required?": "No", "Description": "Snowflake role to use. If not defined then the user's default role will be used"}, {"Property": "aws_access_key_id", "Type": "String", "Required?": "No", "Description": "S3 Access Key Id. If not provided, AWS_ACCESS_KEY_ID environment variable or IAM role will be used"}, {"Property": "aws_secret_access_key", "Type": "String", "Required?": "No", "Description": "S3 Secret Access Key. If not provided, AWS_SECRET_ACCESS_KEY environment variable or IAM role will be used"}, {"Property": "aws_session_token", "Type": "String", "Required?": "No", "Description": "AWS Session token. If not provided, AWS_SESSION_TOKEN environment variable will be used"}, {"Property": "aws_profile", "Type": "String", "Required?": "No", "Description": "AWS profile name for profile based authentication. If not provided, AWS_PROFILE environment variable will be used."}, {"Property": "s3_bucket", "Type": "String", "Required?": "No", "Description": "S3 Bucket name. Required if to use S3 External stage. When this is defined then stage has to be defined as well."}, {"Property": "s3_key_prefix", "Type": "String", "Required?": "No", "Description": "(Default: None) A static prefix before the generated S3 key names. Using prefixes you can upload files into specific directories in the S3 bucket."}, {"Property": "s3_endpoint_url", "Type": "String", "Required?": "No", "Description": "The complete URL to use for the constructed client. This is allowing to use non-native s3 account."}, {"Property": "s3_region_name", "Type": "String", "Required?": "No", "Description": "Default region when creating new connections"}, {"Property": "s3_acl", "Type": "String", "Required?": "No", "Description": "S3 ACL name to set on the uploaded files"}, {"Property": "stage", "Type": "String", "Required?": "No", "Description": "Named external stage name created at pre-requirements section. Has to be a fully qualified name including the schema name. If not specified, table internal stage are used. When this is defined then s3_bucket has to be defined as well."}, {"Property": "file_format", "Type": "String", "Required?": "Yes", "Description": "Named file format name created at pre-requirements section. Has to be a fully qualified name including the schema name."}, {"Property": "batch_size_rows", "Type": "Integer", "Required?": "", "Description": "(Default: 100000) Maximum number of rows in each batch. At the end of each batch, the rows in the batch are loaded into Snowflake."}, {"Property": "batch_wait_limit_seconds", "Type": "Integer", "Required?": "", "Description": "(Default: None) Maximum time to wait for batch to reach batch_size_rows."}, {"Property": "flush_all_streams", "Type": "Boolean", "Required?": "", "Description": "(Default: False) Flush and load every stream into Snowflake when one batch is full. Warning: This may trigger the COPY command to use files with low number of records, and may cause performance problems."}, {"Property": "parallelism", "Type": "Integer", "Required?": "", "Description": "(Default: 0) The number of threads used to flush tables. 0 will create a thread for each stream, up to parallelism_max. -1 will create a thread for each CPU core. Any other positive number will create that number of threads, up to parallelism_max."}, {"Property": "parallelism_max", "Type": "Integer", "Required?": "", "Description": "(Default: 16) Max number of parallel threads to use when flushing tables."}, {"Property": "default_target_schema", "Type": "String", "Required?": "", "Description": "Name of the schema where the tables will be created, without database prefix. If schema_mapping is not defined then every stream sent by the tap is loaded into this schema."}, {"Property": "default_target_schema_select_permission", "Type": "String", "Required?": "", "Description": "Grant USAGE privilege on newly created schemas and grant SELECT privilege on newly created tables to a specific role or a list of roles. If schema_mapping is not defined then every stream sent by the tap is granted accordingly."}, {"Property": "schema_mapping", "Type": "Object", "Required?": "", "Description": "Useful if you want to load multiple streams from one tap to multiple Snowflake schemas.If the tap sends the stream_id in <schema_name>-<table_name> format then this option overwrites the default_target_schema value. Note, that using schema_mapping you can overwrite the default_target_schema_select_permission value to grant SELECT permissions to different groups per schemas or optionally you can create indices automatically for the replicated tables. Note: This is an experimental feature and recommended to use via PipelineWise YAML files that will generate the object mapping in the right JSON format. For further info check a [PipelineWise YAML Example]"}, {"Property": "disable_table_cache", "Type": "Boolean", "Required?": "", "Description": "(Default: False) By default the connector caches the available table structures in Snowflake at startup. In this way it doesn't need to run additional queries when ingesting data to check if altering the target tables is required. With disable_table_cache option you can turn off this caching. You will always see the most recent table structures but will cause an extra query runtime."}, {"Property": "client_side_encryption_master_key", "Type": "String", "Required?": "", "Description": "(Default: None) When this is defined, Client-Side Encryption is enabled. The data in S3 will be encrypted, No third parties, including Amazon AWS and any ISPs, can see data in the clear. Snowflake COPY command will decrypt the data once it's in Snowflake. The master key must be 256-bit length and must be encoded as base64 string."}, {"Property": "add_metadata_columns", "Type": "Boolean", "Required?": "", "Description": "(Default: False) Metadata columns add extra row level information about data ingestions, (i.e. when was the row read in source, when was inserted or deleted in snowflake etc.) Metadata columns are creating automatically by adding extra columns to the tables with a column prefix _SDC_. The column names are following the stitch naming conventions documented at https://www.stitchdata.com/docs/data-structure/integration-schemas#sdc-columns. Enabling metadata columns will flag the deleted rows by setting the _SDC_DELETED_AT metadata column. Without the add_metadata_columns option the deleted rows from singer taps will not be recongisable in Snowflake."}, {"Property": "hard_delete", "Type": "Boolean", "Required?": "", "Description": "(Default: False) When hard_delete option is true then DELETE SQL commands will be performed in Snowflake to delete rows in tables. It's achieved by continuously checking the  _SDC_DELETED_AT metadata column sent by the singer tap. Due to deleting rows requires metadata columns, hard_delete option automatically enables the add_metadata_columns option as well."}, {"Property": "data_flattening_max_level", "Type": "Integer", "Required?": "", "Description": "(Default: 0) Object type RECORD items from taps can be loaded into VARIANT columns as JSON (default) or we can flatten the schema by creating columns automatically.When value is 0 (default) then flattening functionality is turned off."}, {"Property": "primary_key_required", "Type": "Boolean", "Required?": "", "Description": "(Default: True) Log based and Incremental replications on tables with no Primary Key cause duplicates when merging UPDATE events. When set to true, stop loading data if no Primary Key is defined."}, {"Property": "validate_records", "Type": "Boolean", "Required?": "", "Description": "(Default: False) Validate every single record message to the corresponding JSON schema. This option is disabled by default and invalid RECORD messages will fail only at load time by Snowflake. Enabling this option will detect invalid records earlier but could cause performance degradation."}, {"Property": "temp_dir", "Type": "String", "Required?": "", "Description": "(Default: platform-dependent) Directory of temporary files with RECORD messages."}, {"Property": "no_compression", "Type": "Boolean", "Required?": "", "Description": "(Default: False) Generate uncompressed files when loading to Snowflake. Normally, by default GZIP compressed files are generated."}, {"Property": "query_tag", "Type": "String", "Required?": "", "Description": "(Default: None) Optional string to tag executed queries in Snowflake. Replaces tokens {{database}}, {{schema}} and {{table}} with the appropriate values. The tags are displayed in the output of the Snowflake QUERY_HISTORY, QUERY_HISTORY_BY_* functions."}, {"Property": "archive_load_files", "Type": "Boolean", "Required?": "", "Description": "(Default: False) When enabled, the files loaded to Snowflake will also be stored in archive_load_files_s3_bucket under the key /{archive_load_files_s3_prefix}/{schema_name}/{table_name}/. All archived files will have tap, schema, table and archived-by as S3 metadata keys. When incremental replication is used, the archived files will also have the following S3 metadata keys: incremental-key, incremental-key-min and incremental-key-max."}, {"Property": "archive_load_files_s3_prefix", "Type": "String", "Required?": "", "Description": "(Default: \"archive\") When archive_load_files is enabled, the archived files will be placed in the archive S3 bucket under this prefix."}, {"Property": "archive_load_files_s3_bucket", "Type": "String", "Required?": "", "Description": "(Default: Value of s3_bucket) When archive_load_files is enabled, the archived files will be placed in this bucket."}], "instance": 0}]