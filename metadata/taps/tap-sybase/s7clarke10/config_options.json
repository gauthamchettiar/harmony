[{"source": "readme", "content": [{"Setting": "user", "Required": true, "Default": "None", "Description": "The user name used to connect to the Sybase database"}, {"Setting": "password", "Required": true, "Default": "None", "Description": "The password for the connecting user to the Sybase database"}, {"Setting": "host", "Required": true, "Default": "None", "Description": "The host name or IP Address running the Sybase Database"}, {"Setting": "port", "Required": false, "Default": "2638", "Description": "The port that the database is running on, defaults to port 2638"}, {"Setting": "filter_dbs", "Required": false, "Default": "None", "Description": "To filter the discovery to a particular schema within a database. This is useful if you have a large number of schemas and wish to speed up the discovery."}, {"Setting": "use_date_datatype", "Required": false, "Default": "False", "Description": "To emit a date as a date without a time component or time without an UTC offset. This is helpful to avoid time conversions or to just work with a date datetype in the target database. If this boolean config item is not set, the default behaviour is false i.e. emit date datatypes as a datetime. It is recommended to set this on if you have time datetypes and are having issues uploading into into a target database."}, {"Setting": "tds_version", "Required": false, "Default": "None", "Description": "Set the version of TDS to use when communicating with Sybase Server (the default is None). This is used by pymssql with connecting and fetching data from Sybase databases. See the pymssql documentation and FreeTDS documentation for more  details."}, {"Setting": "characterset", "Required": false, "Default": "utf8", "Description": "The characterset for the database / source system. The default is utf8, however older databases might use a charactersets like cp1252 for the encoding. If you have errors with a UnicodeDecodeError: 'utf-8' codec can't decode byte .... then a solution is examine the characterset of the source database / system and make an appropriate substitution for utf8 like cp1252."}, {"Setting": "cursor_array_size", "Required": false, "Default": "1", "Description": "To make use of fetchmany(x) instead of fetchone(), use cursor_array_size with an integer value indicating the number of rows to pull. This can help in some architectures by pulling more rows into memory. The default if omitted is 1, the tap will still use fetchmany, but with an argument of 1, under the assumption that  like cp1252."}, {"Setting": "use_singer_decimal", "Required": false, "Default": "False", "Description": "o emit all numeric values as strings and treat floats as string data types for the target, set use_singer_decimal to true. The resulting SCHEMA message will contain an attribute in additionalProperties containing the scale and precision of the discovered property"}, {"Setting": "stream_maps", "Required": false, "Default": "None", "Description": "Config object for stream maps capability. For more information check out Stream Maps."}, {"Setting": "stream_map_config", "Required": false, "Default": "None", "Description": "User-defined config values to be used within map expressions."}, {"Setting": "flattening_enabled", "Required": false, "Default": "None", "Description": "'True' to enable schema flattening and automatically expand nested properties."}, {"Setting": "flattening_max_depth", "Required": false, "Default": "None", "Description": "The max depth to flatten schemas."}], "instance": 0}]